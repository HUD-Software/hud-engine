#include <OSLayer/Memory.h>

TEST(Memory, align_address)
{
    using namespace hud;
      
    // Non constant
    {
        uptr result11 = Memory::align_address(0x00000001, 1);
        ASSERT_EQ(result11, uptr{ 0x00000001 });
        uptr result21 = Memory::align_address(0x00000002, 1);
        ASSERT_EQ(result21, uptr{ 0x00000002 });
        uptr result31 = Memory::align_address(0x00000003, 1);
        ASSERT_EQ(result31, uptr{ 0x00000003 });
        uptr result41 = Memory::align_address(0x00000004, 1);
        ASSERT_EQ(result41, uptr{ 0x00000004 });
        uptr result51 = Memory::align_address(0x00000005, 1);
        ASSERT_EQ(result51, uptr{ 0x00000005 });
        uptr result61 = Memory::align_address(0x00000006, 1);
        ASSERT_EQ(result61, uptr{ 0x00000006 });
        uptr result71 = Memory::align_address(0x00000007, 1);
        ASSERT_EQ(result71, uptr{ 0x00000007 });
        uptr result81 = Memory::align_address(0x00000008, 1);
        ASSERT_EQ(result81, uptr{ 0x00000008 });
        uptr result91 = Memory::align_address(0x00000009, 1);
        ASSERT_EQ(result91, uptr{ 0x00000009 });
        uptr resultA1 = Memory::align_address(0x0000000A, 1);
        ASSERT_EQ(resultA1, uptr{ 0x0000000A });
        uptr resultB1 = Memory::align_address(0x0000000B, 1);
        ASSERT_EQ(resultB1, uptr{ 0x0000000B });
        uptr resultC1 = Memory::align_address(0x0000000C, 1);
        ASSERT_EQ(resultC1, uptr{ 0x0000000C });
        uptr resultD1 = Memory::align_address(0x0000000D, 1);
        ASSERT_EQ(resultD1, uptr{ 0x0000000D });
        uptr resultE1 = Memory::align_address(0x0000000E, 1);
        ASSERT_EQ(resultE1, uptr{ 0x0000000E });
        uptr resultF1 = Memory::align_address(0x0000000F, 1);
        ASSERT_EQ(resultF1, uptr{ 0x0000000F });
        uptr result101 = Memory::align_address(0x00000010, 1);
        ASSERT_EQ(result101, uptr{ 0x00000010 });

        uptr result14 = Memory::align_address(0x00000001, 4);
        ASSERT_EQ(result14, uptr{ 0x00000004 });
        uptr result24 = Memory::align_address(0x00000002, 4);
        ASSERT_EQ(result24, uptr{ 0x00000004 });
        uptr result34 = Memory::align_address(0x00000003, 4);
        ASSERT_EQ(result34, uptr{ 0x00000004 });
        uptr result44 = Memory::align_address(0x00000004, 4);
        ASSERT_EQ(result44, uptr{ 0x00000004 });
        uptr result54 = Memory::align_address(0x00000005, 4);
        ASSERT_EQ(result54, uptr{ 0x00000008 });
        uptr result64 = Memory::align_address(0x00000006, 4);
        ASSERT_EQ(result64, uptr{ 0x00000008 });
        uptr result74 = Memory::align_address(0x00000007, 4);
        ASSERT_EQ(result74, uptr{ 0x00000008 });
        uptr result84 = Memory::align_address(0x00000008, 4);
        ASSERT_EQ(result84, uptr{ 0x00000008 });
        uptr result94 = Memory::align_address(0x00000009, 4);
        ASSERT_EQ(result94, uptr{ 0x0000000C });
        uptr resultA4 = Memory::align_address(0x0000000A, 4);
        ASSERT_EQ(resultA4, uptr{ 0x0000000C });
        uptr resultB4 = Memory::align_address(0x0000000B, 4);
        ASSERT_EQ(resultB4, uptr{ 0x0000000C });
        uptr resultC4 = Memory::align_address(0x0000000C, 4);
        ASSERT_EQ(resultC4, uptr{ 0x0000000C });
        uptr resultD4 = Memory::align_address(0x0000000D, 4);
        ASSERT_EQ(resultD4, uptr{ 0x00000010 });
        uptr resultE4 = Memory::align_address(0x0000000E, 4);
        ASSERT_EQ(resultE4, uptr{ 0x00000010 });
        uptr resultF4 = Memory::align_address(0x0000000F, 4);
        ASSERT_EQ(resultF4, uptr{ 0x00000010 });
        uptr result104 = Memory::align_address(0x00000010, 4);
        ASSERT_EQ(result104, uptr{ 0x00000010 });

        uptr result18 = Memory::align_address(0x00000001, 8);
        ASSERT_EQ(result18, uptr{ 0x00000008 });
        uptr result28 = Memory::align_address(0x00000002, 8);
        ASSERT_EQ(result28, uptr{ 0x00000008 });
        uptr result38 = Memory::align_address(0x00000003, 8);
        ASSERT_EQ(result38, uptr{ 0x00000008 });
        uptr result48 = Memory::align_address(0x00000004, 8);
        ASSERT_EQ(result48, uptr{ 0x00000008 });
        uptr result58 = Memory::align_address(0x00000005, 8);
        ASSERT_EQ(result58, uptr{ 0x00000008 });
        uptr result68 = Memory::align_address(0x00000006, 8);
        ASSERT_EQ(result68, uptr{ 0x00000008 });
        uptr result78 = Memory::align_address(0x00000007, 8);
        ASSERT_EQ(result78, uptr{ 0x00000008 });
        uptr result88 = Memory::align_address(0x00000008, 8);
        ASSERT_EQ(result88, uptr{ 0x00000008 });
        uptr result98 = Memory::align_address(0x00000009, 8);
        ASSERT_EQ(result98, uptr{ 0x00000010 });
        uptr resultA8 = Memory::align_address(0x0000000A, 8);
        ASSERT_EQ(resultA8, uptr{ 0x00000010 });
        uptr resultB8 = Memory::align_address(0x0000000B, 8);
        ASSERT_EQ(resultB8, uptr{ 0x00000010 });
        uptr resultC8 = Memory::align_address(0x0000000C, 8);
        ASSERT_EQ(resultC8, uptr{ 0x00000010 });
        uptr resultD8 = Memory::align_address(0x0000000D, 8);
        ASSERT_EQ(resultD8, uptr{ 0x00000010 });
        uptr resultE8 = Memory::align_address(0x0000000E, 8);
        ASSERT_EQ(resultE8, uptr{ 0x00000010 });
        uptr resultF8 = Memory::align_address(0x0000000F, 8);
        ASSERT_EQ(resultF8, uptr{ 0x00000010 });
        uptr result108 = Memory::align_address(0x00000010, 8);
        ASSERT_EQ(result108, uptr{ 0x00000010 });

        uptr result1C = Memory::align_address(0x00000001, 0xC);
        ASSERT_EQ(result1C, uptr{ 0x00000004 });
        uptr result2C = Memory::align_address(0x00000002, 0xC);
        ASSERT_EQ(result2C, uptr{ 0x00000004 });
        uptr result3C = Memory::align_address(0x00000003, 0xC);
        ASSERT_EQ(result3C, uptr{ 0x00000004 });
        uptr result4C = Memory::align_address(0x00000004, 0xC);
        ASSERT_EQ(result4C, uptr{ 0x00000004 });
        uptr result5C = Memory::align_address(0x00000005, 0xC);
        ASSERT_EQ(result5C, uptr{ 0x00000010 });
        uptr result6C = Memory::align_address(0x00000006, 0xC);
        ASSERT_EQ(result6C, uptr{ 0x00000010 });
        uptr result7C = Memory::align_address(0x00000007, 0xC);
        ASSERT_EQ(result7C, uptr{ 0x00000010 });
        uptr result8C = Memory::align_address(0x00000008, 0xC);
        ASSERT_EQ(result8C, uptr{ 0x00000010 });
        uptr result9C = Memory::align_address(0x00000009, 0xC);
        ASSERT_EQ(result9C, uptr{ 0x00000014 });
        uptr resultAC = Memory::align_address(0x0000000A, 0xC);
        ASSERT_EQ(resultAC, uptr{ 0x00000014 });
        uptr resultBC = Memory::align_address(0x0000000B, 0xC);
        ASSERT_EQ(resultBC, uptr{ 0x00000014 });
        uptr resultCC = Memory::align_address(0x0000000C, 0xC);
        ASSERT_EQ(resultCC, uptr{ 0x00000014 });
        uptr resultDC = Memory::align_address(0x0000000D, 0xC);
        ASSERT_EQ(resultDC, uptr{ 0x00000010 });
        uptr resultEC = Memory::align_address(0x0000000E, 0xC);
        ASSERT_EQ(resultEC, uptr{ 0x00000010 });
        uptr resultFC = Memory::align_address(0x0000000F, 0xC);
        ASSERT_EQ(resultFC, uptr{ 0x00000010 });
        uptr result10C = Memory::align_address(0x00000010, 0xC);
        ASSERT_EQ(result10C, uptr{ 0x00000010 });

        uptr result110 = Memory::align_address(0x00000001, 0x10);
        ASSERT_EQ(result110, uptr{ 0x00000010 });
        uptr result210 = Memory::align_address(0x00000002, 0x10);
        ASSERT_EQ(result210, uptr{ 0x00000010 });
        uptr result310 = Memory::align_address(0x00000003, 0x10);
        ASSERT_EQ(result310, uptr{ 0x00000010 });
        uptr result410 = Memory::align_address(0x00000004, 0x10);
        ASSERT_EQ(result410, uptr{ 0x00000010 });
        uptr result510 = Memory::align_address(0x00000005, 0x10);
        ASSERT_EQ(result510, uptr{ 0x00000010 });
        uptr result610 = Memory::align_address(0x00000006, 0x10);
        ASSERT_EQ(result610, uptr{ 0x00000010 });
        uptr result710 = Memory::align_address(0x00000007, 0x10);
        ASSERT_EQ(result710, uptr{ 0x00000010 });
        uptr result810 = Memory::align_address(0x00000008, 0x10);
        ASSERT_EQ(result810, uptr{ 0x00000010 });
        uptr result910 = Memory::align_address(0x00000009, 0x10);
        ASSERT_EQ(result910, uptr{ 0x00000010 });
        uptr resultA10 = Memory::align_address(0x0000000A, 0x10);
        ASSERT_EQ(resultA10, uptr{ 0x00000010 });
        uptr resultB10 = Memory::align_address(0x0000000B, 0x10);
        ASSERT_EQ(resultB10, uptr{ 0x00000010 });
        uptr resultC10 = Memory::align_address(0x0000000C, 0x10);
        ASSERT_EQ(resultC10, uptr{ 0x00000010 });
        uptr resultD10 = Memory::align_address(0x0000000D, 0x10);
        ASSERT_EQ(resultD10, uptr{ 0x00000010 });
        uptr resultE10 = Memory::align_address(0x0000000E, 0x10);
        ASSERT_EQ(resultE10, uptr{ 0x00000010 });
        uptr resultF10 = Memory::align_address(0x0000000F, 0x10);
        ASSERT_EQ(resultF10, uptr{ 0x00000010 });
        uptr result1010 = Memory::align_address(0x00000010, 0x10);
        ASSERT_EQ(result1010, uptr{ 0x00000010 });
    }

    // Constant
    {
        constexpr uptr result11 = Memory::align_address(0x00000001, 1);
        ASSERT_EQ(result11, uptr{ 0x00000001 });
        constexpr uptr result21 = Memory::align_address(0x00000002, 1);
        ASSERT_EQ(result21, uptr{ 0x00000002 });
        constexpr uptr result31 = Memory::align_address(0x00000003, 1);
        ASSERT_EQ(result31, uptr{ 0x00000003 });
        constexpr uptr result41 = Memory::align_address(0x00000004, 1);
        ASSERT_EQ(result41, uptr{ 0x00000004 });
        constexpr uptr result51 = Memory::align_address(0x00000005, 1);
        ASSERT_EQ(result51, uptr{ 0x00000005 });
        constexpr uptr result61 = Memory::align_address(0x00000006, 1);
        ASSERT_EQ(result61, uptr{ 0x00000006 });
        constexpr uptr result71 = Memory::align_address(0x00000007, 1);
        ASSERT_EQ(result71, uptr{ 0x00000007 });
        constexpr uptr result81 = Memory::align_address(0x00000008, 1);
        ASSERT_EQ(result81, uptr{ 0x00000008 });
        constexpr uptr result91 = Memory::align_address(0x00000009, 1);
        ASSERT_EQ(result91, uptr{ 0x00000009 });
        constexpr uptr resultA1 = Memory::align_address(0x0000000A, 1);
        ASSERT_EQ(resultA1, uptr{ 0x0000000A });
        constexpr uptr resultB1 = Memory::align_address(0x0000000B, 1);
        ASSERT_EQ(resultB1, uptr{ 0x0000000B });
        constexpr uptr resultC1 = Memory::align_address(0x0000000C, 1);
        ASSERT_EQ(resultC1, uptr{ 0x0000000C });
        constexpr uptr resultD1 = Memory::align_address(0x0000000D, 1);
        ASSERT_EQ(resultD1, uptr{ 0x0000000D });
        constexpr uptr resultE1 = Memory::align_address(0x0000000E, 1);
        ASSERT_EQ(resultE1, uptr{ 0x0000000E });
        constexpr uptr resultF1 = Memory::align_address(0x0000000F, 1);
        ASSERT_EQ(resultF1, uptr{ 0x0000000F });
        constexpr uptr result101 = Memory::align_address(0x00000010, 1);
        ASSERT_EQ(result101, uptr{ 0x00000010 });

        constexpr uptr result14 = Memory::align_address(0x00000001, 4);
        ASSERT_EQ(result14, uptr{ 0x00000004 });
        constexpr uptr result24 = Memory::align_address(0x00000002, 4);
        ASSERT_EQ(result24, uptr{ 0x00000004 });
        constexpr uptr result34 = Memory::align_address(0x00000003, 4);
        ASSERT_EQ(result34, uptr{ 0x00000004 });
        constexpr uptr result44 = Memory::align_address(0x00000004, 4);
        ASSERT_EQ(result44, uptr{ 0x00000004 });
        constexpr uptr result54 = Memory::align_address(0x00000005, 4);
        ASSERT_EQ(result54, uptr{ 0x00000008 });
        constexpr uptr result64 = Memory::align_address(0x00000006, 4);
        ASSERT_EQ(result64, uptr{ 0x00000008 });
        constexpr uptr result74 = Memory::align_address(0x00000007, 4);
        ASSERT_EQ(result74, uptr{ 0x00000008 });
        constexpr uptr result84 = Memory::align_address(0x00000008, 4);
        ASSERT_EQ(result84, uptr{ 0x00000008 });
        constexpr uptr result94 = Memory::align_address(0x00000009, 4);
        ASSERT_EQ(result94, uptr{ 0x0000000C });
        constexpr uptr resultA4 = Memory::align_address(0x0000000A, 4);
        ASSERT_EQ(resultA4, uptr{ 0x0000000C });
        constexpr uptr resultB4 = Memory::align_address(0x0000000B, 4);
        ASSERT_EQ(resultB4, uptr{ 0x0000000C });
        constexpr uptr resultC4 = Memory::align_address(0x0000000C, 4);
        ASSERT_EQ(resultC4, uptr{ 0x0000000C });
        constexpr uptr resultD4 = Memory::align_address(0x0000000D, 4);
        ASSERT_EQ(resultD4, uptr{ 0x00000010 });
        constexpr uptr resultE4 = Memory::align_address(0x0000000E, 4);
        ASSERT_EQ(resultE4, uptr{ 0x00000010 });
        constexpr uptr resultF4 = Memory::align_address(0x0000000F, 4);
        ASSERT_EQ(resultF4, uptr{ 0x00000010 });
        constexpr uptr result104 = Memory::align_address(0x00000010, 4);
        ASSERT_EQ(result104, uptr{ 0x00000010 });

        constexpr uptr result18 = Memory::align_address(0x00000001, 8);
        ASSERT_EQ(result18, uptr{ 0x00000008 });
        constexpr uptr result28 = Memory::align_address(0x00000002, 8);
        ASSERT_EQ(result28, uptr{ 0x00000008 });
        constexpr uptr result38 = Memory::align_address(0x00000003, 8);
        ASSERT_EQ(result38, uptr{ 0x00000008 });
        constexpr uptr result48 = Memory::align_address(0x00000004, 8);
        ASSERT_EQ(result48, uptr{ 0x00000008 });
        constexpr uptr result58 = Memory::align_address(0x00000005, 8);
        ASSERT_EQ(result58, uptr{ 0x00000008 });
        constexpr uptr result68 = Memory::align_address(0x00000006, 8);
        ASSERT_EQ(result68, uptr{ 0x00000008 });
        constexpr uptr result78 = Memory::align_address(0x00000007, 8);
        ASSERT_EQ(result78, uptr{ 0x00000008 });
        constexpr uptr result88 = Memory::align_address(0x00000008, 8);
        ASSERT_EQ(result88, uptr{ 0x00000008 });
        constexpr uptr result98 = Memory::align_address(0x00000009, 8);
        ASSERT_EQ(result98, uptr{ 0x00000010 });
        constexpr uptr resultA8 = Memory::align_address(0x0000000A, 8);
        ASSERT_EQ(resultA8, uptr{ 0x00000010 });
        constexpr uptr resultB8 = Memory::align_address(0x0000000B, 8);
        ASSERT_EQ(resultB8, uptr{ 0x00000010 });
        constexpr uptr resultC8 = Memory::align_address(0x0000000C, 8);
        ASSERT_EQ(resultC8, uptr{ 0x00000010 });
        constexpr uptr resultD8 = Memory::align_address(0x0000000D, 8);
        ASSERT_EQ(resultD8, uptr{ 0x00000010 });
        constexpr uptr resultE8 = Memory::align_address(0x0000000E, 8);
        ASSERT_EQ(resultE8, uptr{ 0x00000010 });
        constexpr uptr resultF8 = Memory::align_address(0x0000000F, 8);
        ASSERT_EQ(resultF8, uptr{ 0x00000010 });
        constexpr uptr result108 = Memory::align_address(0x00000010, 8);
        ASSERT_EQ(result108, uptr{ 0x00000010 });

        constexpr uptr result1C = Memory::align_address(0x00000001, 0xC);
        ASSERT_EQ(result1C, uptr{ 0x00000004 });
        constexpr uptr result2C = Memory::align_address(0x00000002, 0xC);
        ASSERT_EQ(result2C, uptr{ 0x00000004 });
        constexpr uptr result3C = Memory::align_address(0x00000003, 0xC);
        ASSERT_EQ(result3C, uptr{ 0x00000004 });
        constexpr uptr result4C = Memory::align_address(0x00000004, 0xC);
        ASSERT_EQ(result4C, uptr{ 0x00000004 });
        constexpr uptr result5C = Memory::align_address(0x00000005, 0xC);
        ASSERT_EQ(result5C, uptr{ 0x00000010 });
        constexpr uptr result6C = Memory::align_address(0x00000006, 0xC);
        ASSERT_EQ(result6C, uptr{ 0x00000010 });
        constexpr uptr result7C = Memory::align_address(0x00000007, 0xC);
        ASSERT_EQ(result7C, uptr{ 0x00000010 });
        constexpr uptr result8C = Memory::align_address(0x00000008, 0xC);
        ASSERT_EQ(result8C, uptr{ 0x00000010 });
        constexpr uptr result9C = Memory::align_address(0x00000009, 0xC);
        ASSERT_EQ(result9C, uptr{ 0x00000014 });
        constexpr uptr resultAC = Memory::align_address(0x0000000A, 0xC);
        ASSERT_EQ(resultAC, uptr{ 0x00000014 });
        constexpr uptr resultBC = Memory::align_address(0x0000000B, 0xC);
        ASSERT_EQ(resultBC, uptr{ 0x00000014 });
        constexpr uptr resultCC = Memory::align_address(0x0000000C, 0xC);
        ASSERT_EQ(resultCC, uptr{ 0x00000014 });
        constexpr uptr resultDC = Memory::align_address(0x0000000D, 0xC);
        ASSERT_EQ(resultDC, uptr{ 0x00000010 });
        constexpr uptr resultEC = Memory::align_address(0x0000000E, 0xC);
        ASSERT_EQ(resultEC, uptr{ 0x00000010 });
        constexpr uptr resultFC = Memory::align_address(0x0000000F, 0xC);
        ASSERT_EQ(resultFC, uptr{ 0x00000010 });
        constexpr uptr result10C = Memory::align_address(0x00000010, 0xC);
        ASSERT_EQ(result10C, uptr{ 0x00000010 });

        constexpr uptr result110 = Memory::align_address(0x00000001, 0x10);
        ASSERT_EQ(result110, uptr{ 0x00000010 });
        constexpr uptr result210 = Memory::align_address(0x00000002, 0x10);
        ASSERT_EQ(result210, uptr{ 0x00000010 });
        constexpr uptr result310 = Memory::align_address(0x00000003, 0x10);
        ASSERT_EQ(result310, uptr{ 0x00000010 });
        constexpr uptr result410 = Memory::align_address(0x00000004, 0x10);
        ASSERT_EQ(result410, uptr{ 0x00000010 });
        constexpr uptr result510 = Memory::align_address(0x00000005, 0x10);
        ASSERT_EQ(result510, uptr{ 0x00000010 });
        constexpr uptr result610 = Memory::align_address(0x00000006, 0x10);
        ASSERT_EQ(result610, uptr{ 0x00000010 });
        constexpr uptr result710 = Memory::align_address(0x00000007, 0x10);
        ASSERT_EQ(result710, uptr{ 0x00000010 });
        constexpr uptr result810 = Memory::align_address(0x00000008, 0x10);
        ASSERT_EQ(result810, uptr{ 0x00000010 });
        constexpr uptr result910 = Memory::align_address(0x00000009, 0x10);
        ASSERT_EQ(result910, uptr{ 0x00000010 });
        constexpr uptr resultA10 = Memory::align_address(0x0000000A, 0x10);
        ASSERT_EQ(resultA10, uptr{ 0x00000010 });
        constexpr uptr resultB10 = Memory::align_address(0x0000000B, 0x10);
        ASSERT_EQ(resultB10, uptr{ 0x00000010 });
        constexpr uptr resultC10 = Memory::align_address(0x0000000C, 0x10);
        ASSERT_EQ(resultC10, uptr{ 0x00000010 });
        constexpr uptr resultD10 = Memory::align_address(0x0000000D, 0x10);
        ASSERT_EQ(resultD10, uptr{ 0x00000010 });
        constexpr uptr resultE10 = Memory::align_address(0x0000000E, 0x10);
        ASSERT_EQ(resultE10, uptr{ 0x00000010 });
        constexpr uptr resultF10 = Memory::align_address(0x0000000F, 0x10);
        ASSERT_EQ(resultF10, uptr{ 0x00000010 });
        constexpr uptr result1010 = Memory::align_address(0x00000010, 0x10);
        ASSERT_EQ(result1010, uptr{ 0x00000010 });
    }

}

TEST(Memory, is_address_aligned)
{
    using namespace hud;

    // Non constant
    {
        bool result11 = Memory::is_address_aligned(0x00000001, 1);
        ASSERT_TRUE(result11);
        bool result21 = Memory::is_address_aligned(0x00000002, 1);
        ASSERT_TRUE(result21);
        bool result31 = Memory::is_address_aligned(0x00000003, 1);
        ASSERT_TRUE(result31);
        bool result41 = Memory::is_address_aligned(0x00000004, 1);
        ASSERT_TRUE(result41);
        bool result51 = Memory::is_address_aligned(0x00000005, 1);
        ASSERT_TRUE(result51);
        bool result61 = Memory::is_address_aligned(0x00000006, 1);
        ASSERT_TRUE(result61);
        bool result71 = Memory::is_address_aligned(0x00000007, 1);
        ASSERT_TRUE(result71);
        bool result81 = Memory::is_address_aligned(0x00000008, 1);
        ASSERT_TRUE(result81);
        bool result91 = Memory::is_address_aligned(0x00000009, 1);
        ASSERT_TRUE(result91);
        bool resultA1 = Memory::is_address_aligned(0x0000000A, 1);
        ASSERT_TRUE(resultA1);
        bool resultB1 = Memory::is_address_aligned(0x0000000B, 1);
        ASSERT_TRUE(resultB1);
        bool resultC1 = Memory::is_address_aligned(0x0000000C, 1);
        ASSERT_TRUE(resultC1);
        bool resultD1 = Memory::is_address_aligned(0x0000000D, 1);
        ASSERT_TRUE(resultD1);
        bool resultE1 = Memory::is_address_aligned(0x0000000E, 1);
        ASSERT_TRUE(resultE1);
        bool resultF1 = Memory::is_address_aligned(0x0000000F, 1);
        ASSERT_TRUE(resultF1);
        bool result101 = Memory::is_address_aligned(0x00000010, 1);
        ASSERT_TRUE(result101);

        bool result14 = Memory::is_address_aligned(0x00000001, 4);
        ASSERT_FALSE(result14);
        bool result24 = Memory::is_address_aligned(0x00000002, 4);
        ASSERT_FALSE(result24);
        bool result34 = Memory::is_address_aligned(0x00000003, 4);
        ASSERT_FALSE(result34);
        bool result44 = Memory::is_address_aligned(0x00000004, 4);
        ASSERT_TRUE(result44);
        bool result54 = Memory::is_address_aligned(0x00000005, 4);
        ASSERT_FALSE(result54);
        bool result64 = Memory::is_address_aligned(0x00000006, 4);
        ASSERT_FALSE(result64);
        bool result74 = Memory::is_address_aligned(0x00000007, 4);
        ASSERT_FALSE(result74);
        bool result84 = Memory::is_address_aligned(0x00000008, 4);
        ASSERT_TRUE(result84);
        bool result94 = Memory::is_address_aligned(0x00000009, 4);
        ASSERT_FALSE(result94);
        bool resultA4 = Memory::is_address_aligned(0x0000000A, 4);
        ASSERT_FALSE(resultA4);
        bool resultB4 = Memory::is_address_aligned(0x0000000B, 4);
        ASSERT_FALSE(resultB4);
        bool resultC4 = Memory::is_address_aligned(0x0000000C, 4);
        ASSERT_TRUE(resultC4);
        bool resultD4 = Memory::is_address_aligned(0x0000000D, 4);
        ASSERT_FALSE(resultD4);
        bool resultE4 = Memory::is_address_aligned(0x0000000E, 4);
        ASSERT_FALSE(resultE4);
        bool resultF4 = Memory::is_address_aligned(0x0000000F, 4);
        ASSERT_FALSE(resultF4);
        bool result104 = Memory::is_address_aligned(0x00000010, 4);
        ASSERT_TRUE(result104);

        bool result18 = Memory::is_address_aligned(0x00000001, 8);
        ASSERT_FALSE(result18);
        bool result28 = Memory::is_address_aligned(0x00000002, 8);
        ASSERT_FALSE(result28);
        bool result38 = Memory::is_address_aligned(0x00000003, 8);
        ASSERT_FALSE(result38);
        bool result48 = Memory::is_address_aligned(0x00000004, 8);
        ASSERT_FALSE(result48);
        bool result58 = Memory::is_address_aligned(0x00000005, 8);
        ASSERT_FALSE(result58);
        bool result68 = Memory::is_address_aligned(0x00000006, 8);
        ASSERT_FALSE(result68);
        bool result78 = Memory::is_address_aligned(0x00000007, 8);
        ASSERT_FALSE(result78);
        bool result88 = Memory::is_address_aligned(0x00000008, 8);
        ASSERT_TRUE(result88);
        bool result98 = Memory::is_address_aligned(0x00000009, 8);
        ASSERT_FALSE(result98);
        bool resultA8 = Memory::is_address_aligned(0x0000000A, 8);
        ASSERT_FALSE(resultA8);
        bool resultB8 = Memory::is_address_aligned(0x0000000B, 8);
        ASSERT_FALSE(resultB8);
        bool resultC8 = Memory::is_address_aligned(0x0000000C, 8);
        ASSERT_FALSE(resultC8);
        bool resultD8 = Memory::is_address_aligned(0x0000000D, 8);
        ASSERT_FALSE(resultD8);
        bool resultE8 = Memory::is_address_aligned(0x0000000E, 8);
        ASSERT_FALSE(resultE8);
        bool resultF8 = Memory::is_address_aligned(0x0000000F, 8);
        ASSERT_FALSE(resultF8);
        bool result108 = Memory::is_address_aligned(0x00000010, 8);
        ASSERT_TRUE(result108);

        bool result1C = Memory::is_address_aligned(0x00000001, 0xC);
        ASSERT_FALSE(result1C);
        bool result2C = Memory::is_address_aligned(0x00000002, 0xC);
        ASSERT_FALSE(result2C);
        bool result3C = Memory::is_address_aligned(0x00000003, 0xC);
        ASSERT_FALSE(result3C);
        bool result4C = Memory::is_address_aligned(0x00000004, 0xC);
        ASSERT_TRUE(result4C);
        bool result5C = Memory::is_address_aligned(0x00000005, 0xC);
        ASSERT_FALSE(result5C);
        bool result6C = Memory::is_address_aligned(0x00000006, 0xC);
        ASSERT_FALSE(result6C);
        bool result7C = Memory::is_address_aligned(0x00000007, 0xC);
        ASSERT_FALSE(result7C);
        bool result8C = Memory::is_address_aligned(0x00000008, 0xC);
        ASSERT_FALSE(result8C);
        bool result9C = Memory::is_address_aligned(0x00000009, 0xC);
        ASSERT_FALSE(result9C);
        bool resultAC = Memory::is_address_aligned(0x0000000A, 0xC);
        ASSERT_FALSE(resultAC);
        bool resultBC = Memory::is_address_aligned(0x0000000B, 0xC);
        ASSERT_FALSE(resultBC);
        bool resultCC = Memory::is_address_aligned(0x0000000C, 0xC);
        ASSERT_FALSE(resultCC);
        bool resultDC = Memory::is_address_aligned(0x0000000D, 0xC);
        ASSERT_FALSE(resultDC);
        bool resultEC = Memory::is_address_aligned(0x0000000E, 0xC);
        ASSERT_FALSE(resultEC);
        bool resultFC = Memory::is_address_aligned(0x0000000F, 0xC);
        ASSERT_FALSE(resultFC);
        bool result10C = Memory::is_address_aligned(0x00000010, 0xC);
        ASSERT_TRUE(result10C);

        bool result110 = Memory::is_address_aligned(0x00000001, 0x10);
        ASSERT_FALSE(result110);
        bool result210 = Memory::is_address_aligned(0x00000002, 0x10);
        ASSERT_FALSE(result210);
        bool result310 = Memory::is_address_aligned(0x00000003, 0x10);
        ASSERT_FALSE(result310);
        bool result410 = Memory::is_address_aligned(0x00000004, 0x10);
        ASSERT_FALSE(result410);
        bool result510 = Memory::is_address_aligned(0x00000005, 0x10);
        ASSERT_FALSE(result510);
        bool result610 = Memory::is_address_aligned(0x00000006, 0x10);
        ASSERT_FALSE(result610);
        bool result710 = Memory::is_address_aligned(0x00000007, 0x10);
        ASSERT_FALSE(result710);
        bool result810 = Memory::is_address_aligned(0x00000008, 0x10);
        ASSERT_FALSE(result810);
        bool result910 = Memory::is_address_aligned(0x00000009, 0x10);
        ASSERT_FALSE(result910);
        bool resultA10 = Memory::is_address_aligned(0x0000000A, 0x10);
        ASSERT_FALSE(resultA10);
        bool resultB10 = Memory::is_address_aligned(0x0000000B, 0x10);
        ASSERT_FALSE(resultB10);
        bool resultC10 = Memory::is_address_aligned(0x0000000C, 0x10);
        ASSERT_FALSE(resultC10);
        bool resultD10 = Memory::is_address_aligned(0x0000000D, 0x10);
        ASSERT_FALSE(resultD10);
        bool resultE10 = Memory::is_address_aligned(0x0000000E, 0x10);
        ASSERT_FALSE(resultE10);
        bool resultF10 = Memory::is_address_aligned(0x0000000F, 0x10);
        ASSERT_FALSE(resultF10);
        bool result1010 = Memory::is_address_aligned(0x00000010, 0x10);
        ASSERT_TRUE(result1010);
    }

    // Constant
    {
    constexpr bool result11 = Memory::is_address_aligned(0x00000001, 1);
    ASSERT_TRUE(result11);
    constexpr bool result21 = Memory::is_address_aligned(0x00000002, 1);
    ASSERT_TRUE(result21);
    constexpr bool result31 = Memory::is_address_aligned(0x00000003, 1);
    ASSERT_TRUE(result31);
    constexpr bool result41 = Memory::is_address_aligned(0x00000004, 1);
    ASSERT_TRUE(result41);
    constexpr bool result51 = Memory::is_address_aligned(0x00000005, 1);
    ASSERT_TRUE(result51);
    constexpr bool result61 = Memory::is_address_aligned(0x00000006, 1);
    ASSERT_TRUE(result61);
    constexpr bool result71 = Memory::is_address_aligned(0x00000007, 1);
    ASSERT_TRUE(result71);
    constexpr bool result81 = Memory::is_address_aligned(0x00000008, 1);
    ASSERT_TRUE(result81);
    constexpr bool result91 = Memory::is_address_aligned(0x00000009, 1);
    ASSERT_TRUE(result91);
    constexpr bool resultA1 = Memory::is_address_aligned(0x0000000A, 1);
    ASSERT_TRUE(resultA1);
    constexpr bool resultB1 = Memory::is_address_aligned(0x0000000B, 1);
    ASSERT_TRUE(resultB1);
    constexpr bool resultC1 = Memory::is_address_aligned(0x0000000C, 1);
    ASSERT_TRUE(resultC1);
    constexpr bool resultD1 = Memory::is_address_aligned(0x0000000D, 1);
    ASSERT_TRUE(resultD1);
    constexpr bool resultE1 = Memory::is_address_aligned(0x0000000E, 1);
    ASSERT_TRUE(resultE1);
    constexpr bool resultF1 = Memory::is_address_aligned(0x0000000F, 1);
    ASSERT_TRUE(resultF1);
    constexpr bool result101 = Memory::is_address_aligned(0x00000010, 1);
    ASSERT_TRUE(result101);

    constexpr bool result14 = Memory::is_address_aligned(0x00000001, 4);
    ASSERT_FALSE(result14);
    constexpr bool result24 = Memory::is_address_aligned(0x00000002, 4);
    ASSERT_FALSE(result24);
    constexpr bool result34 = Memory::is_address_aligned(0x00000003, 4);
    ASSERT_FALSE(result34);
    constexpr bool result44 = Memory::is_address_aligned(0x00000004, 4);
    ASSERT_TRUE(result44);
    constexpr bool result54 = Memory::is_address_aligned(0x00000005, 4);
    ASSERT_FALSE(result54);
    constexpr bool result64 = Memory::is_address_aligned(0x00000006, 4);
    ASSERT_FALSE(result64);
    constexpr bool result74 = Memory::is_address_aligned(0x00000007, 4);
    ASSERT_FALSE(result74);
    constexpr bool result84 = Memory::is_address_aligned(0x00000008, 4);
    ASSERT_TRUE(result84);
    constexpr bool result94 = Memory::is_address_aligned(0x00000009, 4);
    ASSERT_FALSE(result94);
    constexpr bool resultA4 = Memory::is_address_aligned(0x0000000A, 4);
    ASSERT_FALSE(resultA4);
    constexpr bool resultB4 = Memory::is_address_aligned(0x0000000B, 4);
    ASSERT_FALSE(resultB4);
    constexpr bool resultC4 = Memory::is_address_aligned(0x0000000C, 4);
    ASSERT_TRUE(resultC4);
    constexpr bool resultD4 = Memory::is_address_aligned(0x0000000D, 4);
    ASSERT_FALSE(resultD4);
    constexpr bool resultE4 = Memory::is_address_aligned(0x0000000E, 4);
    ASSERT_FALSE(resultE4);
    constexpr bool resultF4 = Memory::is_address_aligned(0x0000000F, 4);
    ASSERT_FALSE(resultF4);
    constexpr bool result104 = Memory::is_address_aligned(0x00000010, 4);
    ASSERT_TRUE(result104);

    constexpr bool result18 = Memory::is_address_aligned(0x00000001, 8);
    ASSERT_FALSE(result18);
    constexpr bool result28 = Memory::is_address_aligned(0x00000002, 8);
    ASSERT_FALSE(result28);
    constexpr bool result38 = Memory::is_address_aligned(0x00000003, 8);
    ASSERT_FALSE(result38);
    constexpr bool result48 = Memory::is_address_aligned(0x00000004, 8);
    ASSERT_FALSE(result48);
    constexpr bool result58 = Memory::is_address_aligned(0x00000005, 8);
    ASSERT_FALSE(result58);
    constexpr bool result68 = Memory::is_address_aligned(0x00000006, 8);
    ASSERT_FALSE(result68);
    constexpr bool result78 = Memory::is_address_aligned(0x00000007, 8);
    ASSERT_FALSE(result78);
    constexpr bool result88 = Memory::is_address_aligned(0x00000008, 8);
    ASSERT_TRUE(result88);
    constexpr bool result98 = Memory::is_address_aligned(0x00000009, 8);
    ASSERT_FALSE(result98);
    constexpr bool resultA8 = Memory::is_address_aligned(0x0000000A, 8);
    ASSERT_FALSE(resultA8);
    constexpr bool resultB8 = Memory::is_address_aligned(0x0000000B, 8);
    ASSERT_FALSE(resultB8);
    constexpr bool resultC8 = Memory::is_address_aligned(0x0000000C, 8);
    ASSERT_FALSE(resultC8);
    constexpr bool resultD8 = Memory::is_address_aligned(0x0000000D, 8);
    ASSERT_FALSE(resultD8);
    constexpr bool resultE8 = Memory::is_address_aligned(0x0000000E, 8);
    ASSERT_FALSE(resultE8);
    constexpr bool resultF8 = Memory::is_address_aligned(0x0000000F, 8);
    ASSERT_FALSE(resultF8);
    constexpr bool result108 = Memory::is_address_aligned(0x00000010, 8);
    ASSERT_TRUE(result108);

    constexpr bool result1C = Memory::is_address_aligned(0x00000001, 0xC);
    ASSERT_FALSE(result1C);
    constexpr bool result2C = Memory::is_address_aligned(0x00000002, 0xC);
    ASSERT_FALSE(result2C);
    constexpr bool result3C = Memory::is_address_aligned(0x00000003, 0xC);
    ASSERT_FALSE(result3C);
    constexpr bool result4C = Memory::is_address_aligned(0x00000004, 0xC);
    ASSERT_TRUE(result4C);
    constexpr bool result5C = Memory::is_address_aligned(0x00000005, 0xC);
    ASSERT_FALSE(result5C);
    constexpr bool result6C = Memory::is_address_aligned(0x00000006, 0xC);
    ASSERT_FALSE(result6C);
    constexpr bool result7C = Memory::is_address_aligned(0x00000007, 0xC);
    ASSERT_FALSE(result7C);
    constexpr bool result8C = Memory::is_address_aligned(0x00000008, 0xC);
    ASSERT_FALSE(result8C);
    constexpr bool result9C = Memory::is_address_aligned(0x00000009, 0xC);
    ASSERT_FALSE(result9C);
    constexpr bool resultAC = Memory::is_address_aligned(0x0000000A, 0xC);
    ASSERT_FALSE(resultAC);
    constexpr bool resultBC = Memory::is_address_aligned(0x0000000B, 0xC);
    ASSERT_FALSE(resultBC);
    constexpr bool resultCC = Memory::is_address_aligned(0x0000000C, 0xC);
    ASSERT_FALSE(resultCC);
    constexpr bool resultDC = Memory::is_address_aligned(0x0000000D, 0xC);
    ASSERT_FALSE(resultDC);
    constexpr bool resultEC = Memory::is_address_aligned(0x0000000E, 0xC);
    ASSERT_FALSE(resultEC);
    constexpr bool resultFC = Memory::is_address_aligned(0x0000000F, 0xC);
    ASSERT_FALSE(resultFC);
    constexpr bool result10C = Memory::is_address_aligned(0x00000010, 0xC);
    ASSERT_TRUE(result10C);

    constexpr bool result110 = Memory::is_address_aligned(0x00000001, 0x10);
    ASSERT_FALSE(result110);
    constexpr bool result210 = Memory::is_address_aligned(0x00000002, 0x10);
    ASSERT_FALSE(result210);
    constexpr bool result310 = Memory::is_address_aligned(0x00000003, 0x10);
    ASSERT_FALSE(result310);
    constexpr bool result410 = Memory::is_address_aligned(0x00000004, 0x10);
    ASSERT_FALSE(result410);
    constexpr bool result510 = Memory::is_address_aligned(0x00000005, 0x10);
    ASSERT_FALSE(result510);
    constexpr bool result610 = Memory::is_address_aligned(0x00000006, 0x10);
    ASSERT_FALSE(result610);
    constexpr bool result710 = Memory::is_address_aligned(0x00000007, 0x10);
    ASSERT_FALSE(result710);
    constexpr bool result810 = Memory::is_address_aligned(0x00000008, 0x10);
    ASSERT_FALSE(result810);
    constexpr bool result910 = Memory::is_address_aligned(0x00000009, 0x10);
    ASSERT_FALSE(result910);
    constexpr bool resultA10 = Memory::is_address_aligned(0x0000000A, 0x10);
    ASSERT_FALSE(resultA10);
    constexpr bool resultB10 = Memory::is_address_aligned(0x0000000B, 0x10);
    ASSERT_FALSE(resultB10);
    constexpr bool resultC10 = Memory::is_address_aligned(0x0000000C, 0x10);
    ASSERT_FALSE(resultC10);
    constexpr bool resultD10 = Memory::is_address_aligned(0x0000000D, 0x10);
    ASSERT_FALSE(resultD10);
    constexpr bool resultE10 = Memory::is_address_aligned(0x0000000E, 0x10);
    ASSERT_FALSE(resultE10);
    constexpr bool resultF10 = Memory::is_address_aligned(0x0000000F, 0x10);
    ASSERT_FALSE(resultF10);
    constexpr bool result1010 = Memory::is_address_aligned(0x00000010, 0x10);
    ASSERT_TRUE(result1010);
    }
}


TEST(Memory, align_pointer)
{
    using namespace hud;

    // Add the header and the maximum padding tested to ensure we have enough memory when 
    // Memory::align_pointer write alignement and pointer informations
    // align_pointer relies on align_address for alignement
    // Memory pattern bis the following: AlignmentPadding|AllocationSize|UnalignPointer|AlignPointer
    constexpr usize buffer_size = 0x10 + Memory::ALIGNED_MALLOC_HEADER_SIZE;
    u8 buffer_allocated[buffer_size];
    void* aligned_pointer = Memory::align_pointer(buffer_allocated, buffer_size, 1);
    ASSERT_TRUE(Memory::is_pointer_aligned(aligned_pointer, 1));
    ASSERT_EQ(*reinterpret_cast<uptr*>((uptr)aligned_pointer - sizeof(usize)), (uptr)buffer_allocated);
    ASSERT_EQ(*reinterpret_cast<usize*>((uptr)aligned_pointer - sizeof(usize) - sizeof(void*)), buffer_size);

    aligned_pointer = Memory::align_pointer(buffer_allocated, buffer_size, 2);
    ASSERT_TRUE(Memory::is_pointer_aligned(aligned_pointer, 2));
    ASSERT_EQ(*reinterpret_cast<uptr*>((uptr)aligned_pointer - sizeof(usize)), (uptr)buffer_allocated);
    ASSERT_EQ(*reinterpret_cast<usize*>((uptr)aligned_pointer - sizeof(usize) - sizeof(void*)), buffer_size);

    aligned_pointer = Memory::align_pointer(buffer_allocated, buffer_size, 4);
    ASSERT_TRUE(Memory::is_pointer_aligned(aligned_pointer, 4));
    ASSERT_EQ(*reinterpret_cast<uptr*>((uptr)aligned_pointer - sizeof(usize)), (uptr)buffer_allocated);
    ASSERT_EQ(*reinterpret_cast<usize*>((uptr)aligned_pointer - sizeof(usize) - sizeof(void*)), buffer_size);

    aligned_pointer = Memory::align_pointer(buffer_allocated, buffer_size, 8);
    ASSERT_TRUE(Memory::is_pointer_aligned(aligned_pointer, 8));
    ASSERT_EQ(*reinterpret_cast<uptr*>((uptr)aligned_pointer - sizeof(usize)), (uptr)buffer_allocated);
    ASSERT_EQ(*reinterpret_cast<usize*>((uptr)aligned_pointer - sizeof(usize) - sizeof(void*)), buffer_size);

    aligned_pointer = Memory::align_pointer(buffer_allocated, buffer_size, 0xC);
    ASSERT_TRUE(Memory::is_pointer_aligned(aligned_pointer, 0xC));
    ASSERT_EQ(*reinterpret_cast<uptr*>((uptr)aligned_pointer - sizeof(usize)), (uptr)buffer_allocated);
    ASSERT_EQ(*reinterpret_cast<usize*>((uptr)aligned_pointer - sizeof(usize) - sizeof(void*)), buffer_size);

    aligned_pointer = Memory::align_pointer(buffer_allocated, buffer_size, 0x10);
    ASSERT_TRUE(Memory::is_pointer_aligned(aligned_pointer, 0x10));
    ASSERT_EQ(*reinterpret_cast<uptr*>((uptr)aligned_pointer - sizeof(usize)), (uptr)buffer_allocated);
    ASSERT_EQ(*reinterpret_cast<usize*>((uptr)aligned_pointer - sizeof(usize) - sizeof(void*)), buffer_size);
}

TEST(Memory, is_pointer_aligned)
{
    using namespace hud;

    ASSERT_TRUE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000001), 1));
    ASSERT_TRUE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000002), 1));
    ASSERT_TRUE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000003), 1));
    ASSERT_TRUE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000004), 1));
    ASSERT_TRUE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000005), 1));
    ASSERT_TRUE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000006), 1));
    ASSERT_TRUE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000007), 1));
    ASSERT_TRUE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000008), 1));
    ASSERT_TRUE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000009), 1));
    ASSERT_TRUE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000A), 1));
    ASSERT_TRUE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000B), 1));
    ASSERT_TRUE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000C), 1));
    ASSERT_TRUE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000D), 1));
    ASSERT_TRUE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000E), 1));
    ASSERT_TRUE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000F), 1));
    ASSERT_TRUE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000010), 1));

    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000001), 4));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000002), 4));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000003), 4));
    ASSERT_TRUE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000004), 4));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000005), 4));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000006), 4));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000007), 4));
    ASSERT_TRUE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000008), 4));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000009), 4));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000A), 4));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000B), 4));
    ASSERT_TRUE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000C), 4));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000D), 4));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000E), 4));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000F), 4));
    ASSERT_TRUE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000010), 4));

    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000001), 8));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000002), 8));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000003), 8));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000004), 8));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000005), 8));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000006), 8));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000007), 8));
    ASSERT_TRUE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000008), 8));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000009), 8));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000A), 8));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000B), 8));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000C), 8));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000D), 8));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000E), 8));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000F), 8));
    ASSERT_TRUE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000010), 8));

    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000001), 0xC));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000002), 0xC));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000003), 0xC));
    ASSERT_TRUE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000004), 0xC));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000005), 0xC));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000006), 0xC));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000007), 0xC));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000008), 0xC));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000009), 0xC));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000A), 0xC));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000B), 0xC));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000C), 0xC));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000D), 0xC));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000E), 0xC));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000F), 0xC));
    ASSERT_TRUE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000010), 0xC));

    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000001), 0x10));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000002), 0x10));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000003), 0x10));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000004), 0x10));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000005), 0x10));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000006), 0x10));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000007), 0x10));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000008), 0x10));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000009), 0x10));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000A), 0x10));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000B), 0x10));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000C), 0x10));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000D), 0x10));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000E), 0x10));
    ASSERT_FALSE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x0000000F), 0x10));
    ASSERT_TRUE(Memory::is_pointer_aligned(reinterpret_cast<void*>(0x00000010), 0x10));
}
