name: Visual Studio

on: [push, pull_request, workflow_dispatch]

jobs:
  #---------------------------
  #
  # Clone the repository
  #
  #----------------------------
  clone:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Cache repository
        uses: actions/cache@v3
        with:
          path: ./**
          key: clone-cache

  #---------------------------
  #
  # Visual Studio Generation
  #
  #----------------------------
  generate:
    runs-on: windows-latest
    name: Generation
    strategy:
      fail-fast: false
      matrix:
        generator: [Visual Studio 2022]
        arch: [Win32,Win64,ARM32,ARM64]
        toolset: [V142, Clang]
    needs: [clone]
    steps:
      - name: Retrieves repository
        uses: actions/cache@v3
        with:
          path: ./**
          key: clone-cache
      - name: Install Visual Studio Components
        shell: pwsh
        run: |
          if("${{ matrix.arch }}" -eq "ARM32") {
            $vs_setup_exe="C:\Program Files (x86)\Microsoft Visual Studio\Installer\setup.exe"
            $vs_install_dir="C:\Program Files (x86)\Microsoft Visual Studio\2022\Enterprise"
            Start-Process -NoNewWindow -FilePath "$vs_setup_exe" -ArgumentList "modify --add Microsoft.VisualStudio.Component.VC.Tools.ARM --installPath $vs_install_dir --passive --norestart"
          }
          elseif("${{ matrix.arch }}" -eq "ARM64") {
            $vs_setup_exe="C:\Program Files (x86)\Microsoft Visual Studio\Installer\setup.exe"
            $vs_install_dir="C:\Program Files (x86)\Microsoft Visual Studio\2022\Enterprise"
            Start-Process -NoNewWindow -FilePath "$vs_setup_exe" -ArgumentList "modify --add Microsoft.VisualStudio.Component.VC.Tools.ARM64 --installPath $vs_install_dir --passive --norestart"
          }
          if("${{matrix.toolset}}" -eq "Clang") {
            $vs_setup_exe="C:\Program Files (x86)\Microsoft Visual Studio\Installer\setup.exe"
            $vs_install_dir="C:\Program Files (x86)\Microsoft Visual Studio\2022\Enterprise"
            Start-Process -NoNewWindow -FilePath "$vs_setup_exe" -ArgumentList "modify --add Microsoft.VisualStudio.Component.VC.Llvm.Clang --installPath $vs_install_dir --passive --norestart"
          }
      - name: Generate Visual Studio 2022 solution
        id: generation
        if: always()
        shell: pwsh
        run: cmd.exe /c Build\\CMake\\Windows\\generate.bat "${{matrix.generator}}" ${{ matrix.arch }} ${{ matrix.toolset }}          
      - name: Save generations
        uses: actions/cache@v3
        with:
          path: Build\\CMake\\Generated\\**
          key: vs2022-${{ matrix.arch }}-${{ matrix.toolset }}-generation-cache
      - name: Create Badge
        if: always()
        shell: pwsh
        run: |
          $svg_path="Status/OSLayer/${{matrix.generator}}/Generations/${{matrix.toolset}}-${{matrix.arch}}-generation.svg"
          if('${{steps.generation.outcome}}' -eq 'success') {
            $url = "https://img.shields.io/badge/${{matrix.arch}}-Fail-red.svg?logo=cmake&logoColor=white"
          } elseif('${{steps.generation.outcome}}' -eq 'failure') {
            $url = "https://img.shields.io/badge/${{matrix.arch}}-Success-green.svg?logo=cmake&logoColor=white"
          } else {
            $url = "https://img.shields.io/badge/${{matrix.arch}}-Invalid-grey.svg?logo=visualstudio&logoColor=white"
          }
          Invoke-WebRequest $url -OutFile ( New-Item -Path $svg_path -Force )
      - name: Save badges
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: os-layer-generation-status
          path: Status/OSLayer/${{matrix.generator}}/Generations/*.svg
      - name: Update cache repository
        uses: actions/cache@v3
        with:
          path: ./**
          key: clone-cache-${{matrix.toolset}}-${{matrix.arch}}

  #---------------------------
  #
  # Visual Studio Build
  #
  #----------------------------
  build:
    name: Build
    runs-on: windows-latest
    needs: [generate]
    strategy:
        fail-fast: false
        matrix:
          generator: [Visual Studio 2022]
          config: [Debug,Release]
          arch: [Win32,Win64,ARM32,ARM64]
          toolset: [V142, Clang]
    if: always()
    steps:
      - name: Retrieves repository
        uses: actions/cache@v3
        with:
          path: ./**
          key: clone-cache-${{matrix.toolset}}-${{matrix.arch}}
      # - name: Retrieves generation
      #   uses: actions/cache@v3
      #   with:
      #     path: Build\\CMake\\Generated\\**
      #     key: vs2022-${{ matrix.arch }}-${{ matrix.toolset }}-generation-cache
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
      - name: Build
        id: build
        shell: pwsh
        run: cmd.exe /c Build\\CMake\\Windows\\build.bat "${{ matrix.generator }}" ${{ matrix.arch }} ${{ matrix.toolset }} ${{ matrix.config }}
      - name: Save binaries
        uses: actions/cache@v3
        with:
          path: Build\\CMake\\Generated\\${{ matrix.generator }}\\${{ matrix.toolset }}\\${{ matrix.arch }}\\${{ matrix.config }}\\**
          key: vs2022-${{ matrix.arch }}-${{ matrix.toolset }}-${{ matrix.config }}-build-cache
      - name: Create Badge
        if: always()
        shell: pwsh
        run: |
          $svg_path="Status/OSLayer/${{matrix.generator}}/Builds/${{matrix.toolset}}-${{matrix.arch}}-${{ matrix.config }}-build.svg"
          if('${{steps.build.outcome}}' -eq 'success') {
            $url = "https://img.shields.io/badge/${{matrix.config}}-Fail-red.svg?logo=visualstudio&logoColor=white"
          } elseif('${{steps.build.outcome}}' -eq 'failure') {
            $url = "https://img.shields.io/badge/${{matrix.config}}-Success-green.svg?logo=visualstudio&logoColor=white"
          } else {
            $url = "https://img.shields.io/badge/${{matrix.config}}-Invalid-grey.svg?logo=visualstudio&logoColor=white"
          }
          Invoke-WebRequest $url -OutFile ( New-Item -Path $svg_path -Force )
      - name: Save badges
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: os-layer-build-status
          path: Status/OSLayer/${{matrix.generator}}/Builds/${{matrix.generator}}/*.svg
      - name: Update cache repository
        uses: actions/cache@v3
        with:
          path: ./**
          key: clone-cache-${{matrix.toolset}}-${{matrix.arch}}-${{ matrix.config }}


  #---------------------------
  #
  # Visual Studio Tests
  #
  #----------------------------
  test:
    name: Test
    runs-on: windows-latest
    needs: [build]
    strategy:
        fail-fast: false
        matrix:
          generator: [Visual Studio 2022]
          config: [Debug,Release]
          arch: [Win32,Win64,ARM32,ARM64]
          toolset: [V142, Clang]
    if: always()
    steps:
      - name: Retrieves repository
        uses: actions/cache@v3
        with:
          path: ./**
          key: clone-cache-${{matrix.toolset}}-${{matrix.arch}}-${{ matrix.config }}
      # - name: Retrieves repository
      #   uses: actions/cache@v3
      #   with:
      #     path: ./**
      #     key: clone-cache
      # - name: Retrieves binaries
      #   uses: actions/cache@v3
      #   with:
      #     path: Build\\CMake\\Generated\\${{ matrix.generator }}\\${{ matrix.toolset }}\\${{ matrix.arch }}\\${{ matrix.config }}\\**
      #     key: vs2022-${{ matrix.arch }}-${{ matrix.toolset }}-${{ matrix.config }}-build-cache
      - name: Test
        shell: pwsh
        run: cmd.exe /c Build\\CMake\\Windows\\test.bat "${{ matrix.generator }}" ${{ matrix.arch }} ${{ matrix.toolset }} ${{ matrix.config }}
      - name: Create Badge
        if: always()
        shell: pwsh
        run: |
          $svg_path="Status/OSLayer/${{matrix.generator}}/Tests/${{matrix.toolset}}-${{matrix.arch}}-${{ matrix.config }}-test.svg"
          if('${{steps.build.outcome}}' -eq 'success') {
            $url = "https://img.shields.io/badge/${{matrix.config}}-Fail-red.svg?logo=cachet&logoColor=white"
          } elseif('${{steps.build.outcome}}' -eq 'failure') {
            $url = "https://img.shields.io/badge/${{matrix.config}}-Success-green.svg?logo=cachet&logoColor=white"
          } else {
            $url = "https://img.shields.io/badge/${{matrix.config}}-Invalid-grey.svg?logo=visualstudio&logoColor=white"
          }
          Invoke-WebRequest $url -OutFile ( New-Item -Path $svg_path -Force )
      - name: Save badges
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: os-layer-test-status
          path: Status/OSLayer/${{matrix.generator}}/Tests/*.svg

 
  #---------------------------
  #
  # Push workflow status
  #
  #----------------------------
  push_status:
    runs-on: ubuntu-latest
    needs: [test]
    strategy:
      fail-fast: false
      matrix:
        generator: [Visual Studio 2022]
    if: always()
    steps:
      - name: Download generation status
        uses: actions/download-artifact@v3
        with:
          name: os-layer-generation-status
          path: Status/OSLayer/${{matrix.generator}}/Generations/
      - name: Download build status
        uses: actions/download-artifact@v3
        with:
          name: os-layer-build-status
          path: Status/OSLayer/${{matrix.generator}}/Builds/
      - name: Download test status
        uses: actions/download-artifact@v3
        with:
          name: os-layer-test-status
          path: Status/OSLayer/${{matrix.generator}}/Tests/
      - name: Push to status web-site
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: 'Status/OSLayer/${{matrix.generator}}'
          target-directory: 'Status/OSLayer/${{matrix.generator}}'
          destination-github-username: 'hud-software'
          destination-repository-name: 'hud-engine-status'
          user-email: ci-oslayer
          target-branch: main

  # build_and_test:
  #   runs-on: windows-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       generator: [Visual Studio 2022, NMake Visual Studio 2022]
  #       config: [Debug,Release]
  #       arch: [Win32,Win64,ARM32,ARM64]
  #       toolset: [V142, Clang]
  #   steps:

  #     - name: Install Visual Studio Components
  #       shell: pwsh
  #       run: |
  #         if("${{ matrix.arch }}" -eq "ARM32") {
  #           $vs_setup_exe="C:\Program Files (x86)\Microsoft Visual Studio\Installer\setup.exe"
  #           $vs_install_dir="C:\Program Files (x86)\Microsoft Visual Studio\2022\Enterprise"
  #           Start-Process -NoNewWindow -FilePath "$vs_setup_exe" -ArgumentList "modify --add Microsoft.VisualStudio.Component.VC.Tools.ARM --installPath $vs_install_dir --passive --norestart"
  #         }
  #         elseif("${{ matrix.arch }}" -eq "ARM64") {
  #           $vs_setup_exe="C:\Program Files (x86)\Microsoft Visual Studio\Installer\setup.exe"
  #           $vs_install_dir="C:\Program Files (x86)\Microsoft Visual Studio\2022\Enterprise"
  #           Start-Process -NoNewWindow -FilePath "$vs_setup_exe" -ArgumentList "modify --add Microsoft.VisualStudio.Component.VC.Tools.ARM64 --installPath $vs_install_dir --passive --norestart"
  #         }
  #     - name: Generate Visual Studio solution
  #       shell: pwsh
  #       run: |
  #         cmd.exe /c Build\\CMake\\Windows\\generate.bat "${{matrix.generator}}" ${{ matrix.arch }} ${{ matrix.toolset }} ${{matrix.config}}
  #         if("${{ matrix.generator }}" -eq "Visual Studio 2022") {
  #           $svg_path="Status/OSLayer/${{matrix.generator}}-${{matrix.toolset}}-${{matrix.arch}}-generation.svg"
  #         } else {
  #           $svg_path="Status/OSLayer/${{matrix.generator}}-${{matrix.toolset}}-${{matrix.arch}}-${{matrix.config}}-generation.svg"
  #         }
  #         if($LASTEXITCODE) { 
  #           $url = "https://img.shields.io/badge/${{matrix.arch}}-Fail-red.svg?logo=cmake&logoColor=white"
  #           Invoke-WebRequest $url -OutFile ( New-Item -Path $svg_path -Force )
  #           Add-Content -Path $env:GITHUB_ENV -Value "last_step_succedded=$false"
  #         } else {
  #           $url = "https://img.shields.io/badge/${{matrix.arch}}-Success-green.svg?logo=cmake&logoColor=white"
  #           Invoke-WebRequest $url -OutFile ( New-Item -Path $svg_path -Force )
  #           Add-Content -Path $env:GITHUB_ENV -Value "last_step_succedded=$true"
  #         }
  #     - name: Add msbuild to PATH
  #       if: always()
  #       uses: microsoft/setup-msbuild@v1.1
  #     - name: Build Visual Studio solution
  #       if: always()
  #       shell: pwsh
  #       run: |
  #         if("${{ env.last_step_succedded }}" -eq "True") {
  #           cmd.exe /c Build\\CMake\\Windows\\build.bat "${{ matrix.generator }}" ${{ matrix.arch }} ${{ matrix.toolset }} ${{ matrix.config }}
  #           if($LASTEXITCODE) {
  #             $url = "https://img.shields.io/badge/${{matrix.config}}-Fail-red.svg?logo=visualstudio&logoColor=white"
  #             Invoke-WebRequest $url -OutFile ( New-Item -Path "Status/OSLayer/${{matrix.generator}}-${{matrix.toolset}}-${{matrix.arch}}-${{ matrix.config }}-build.svg" -Force )
  #             Add-Content -Path $env:GITHUB_ENV -Value "last_step_succedded=$false"
  #           } else {
  #             $url = "https://img.shields.io/badge/${{matrix.config}}-Success-green.svg?logo=visualstudio&logoColor=white"
  #             Invoke-WebRequest $url -OutFile ( New-Item -Path "Status/OSLayer/${{matrix.generator}}-${{matrix.toolset}}-${{matrix.arch}}-${{ matrix.config }}-build.svg" -Force )
  #           }
  #         } else {
  #             $url = "https://img.shields.io/badge/${{matrix.config}}-Invalid-grey.svg?logo=visualstudio&logoColor=white"
  #             Invoke-WebRequest $url -OutFile ( New-Item -Path "Status/OSLayer/${{matrix.generator}}-${{matrix.toolset}}-${{matrix.arch}}-${{ matrix.config }}-build.svg" -Force )
  #         }
  #     - name: Test Visual Studio solution
  #       if: always()
  #       shell: pwsh
  #       run: |
  #         if("${{ env.last_step_succedded }}" -eq "True") {
  #           cmd.exe /c Build\\CMake\\Windows\\test.bat "${{ matrix.generator }}" ${{ matrix.arch }} ${{ matrix.toolset }} ${{ matrix.config }}
  #           if($LASTEXITCODE) { 
  #             $url = "https://img.shields.io/badge/${{matrix.config}}-Fail-red.svg?logo=cachet&logoColor=white"
  #             Invoke-WebRequest $url -OutFile ( New-Item -Path "Status/OSLayer/${{matrix.generator}}-${{matrix.toolset}}-${{matrix.arch}}-${{ matrix.config }}-test.svg" -Force )
  #             Add-Content -Path $env:GITHUB_ENV -Value "last_step_succedded=$false"
  #           } else {
  #             $url = "https://img.shields.io/badge/${{matrix.config}}-Success-green.svg?logo=cachet&logoColor=white"
  #             Invoke-WebRequest $url -OutFile ( New-Item -Path "Status/OSLayer/${{matrix.generator}}-${{matrix.toolset}}-${{matrix.arch}}-${{ matrix.config }}-test.svg" -Force )
  #           }
  #         } else {
  #             $url = "https://img.shields.io/badge/${{matrix.config}}-Invalid-grey.svg?logo=visualstudio&logoColor=white"
  #             Invoke-WebRequest $url -OutFile ( New-Item -Path "Status/OSLayer/${{matrix.generator}}-${{matrix.toolset}}-${{matrix.arch}}-${{ matrix.config }}-test.svg" -Force )
  #         }
  #     - name: Cache status
  #       if: always()
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: os-layer-status
  #         path: Status/OSLayer/*.svg
  #     - name: Finalize
  #       shell: pwsh
  #       run: EXIT "${{ env.last_step_succedded }}" -ne "True"

  # push-status:
  #   runs-on: ubuntu-latest
  #   needs: [build_and_test]
  #   if: always()
  #   steps:
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: os-layer-status
  #         path: Status/OSLayer
  #     - name: Push to status web-site
  #       uses: cpina/github-action-push-to-another-repository@main
  #       env:
  #         API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
  #       with:
  #         source-directory: 'Status/OSLayer'
  #         target-directory: 'Status/OSLayer'
  #         destination-github-username: 'hud-software'
  #         destination-repository-name: 'hud-engine-status'
  #         user-email: ci-oslayer
  #         target-branch: main
