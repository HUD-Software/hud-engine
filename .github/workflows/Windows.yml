name: Windows

on: [push, pull_request, workflow_dispatch]

jobs:
  generate:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        generator: [Visual Studio 2022, NMake Visual Studio 2022]
        config: [Debug,Release]
        arch: [Win32,Win64,ARM32,ARM64]
        toolset: [V142, Clang]
    env:
      GITHUB_ENV=env_var
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Visual Studio Components
        shell: pwsh
        run: |
          if("${{ matrix.arch }}" -eq "ARM32") {
            $vs_setup_exe="C:\Program Files (x86)\Microsoft Visual Studio\Installer\setup.exe"
            $vs_install_dir="C:\Program Files (x86)\Microsoft Visual Studio\2022\Enterprise"
            Start-Process -NoNewWindow -FilePath "$vs_setup_exe" -ArgumentList "modify --add Microsoft.VisualStudio.Component.VC.Tools.ARM --installPath $vs_install_dir --passive --norestart"
          }
          elseif("${{ matrix.arch }}" -eq "ARM64") {
            $vs_setup_exe="C:\Program Files (x86)\Microsoft Visual Studio\Installer\setup.exe"
            $vs_install_dir="C:\Program Files (x86)\Microsoft Visual Studio\2022\Enterprise"
            Start-Process -NoNewWindow -FilePath "$vs_setup_exe" -ArgumentList "modify --add Microsoft.VisualStudio.Component.VC.Tools.ARM64 --installPath $vs_install_dir --passive --norestart"
          }
      - name: Generate Visual Studio solution
        shell: pwsh
        run: |
          cmd.exe /c Build\\CMake\\Windows\\generate.bat "${{matrix.generator}}" ${{ matrix.arch }} ${{ matrix.toolset }} ${{matrix.config}}
          if("${{ matrix.generator }}" -eq "Visual Studio 2022") {
            $svg_path="Status/OSLayer/${{matrix.generator}}-${{matrix.toolset}}-${{matrix.arch}}-generation.svg"
          } else {
            $svg_path="Status/OSLayer/${{matrix.generator}}-${{matrix.toolset}}-${{matrix.arch}}-${{matrix.config}}-generation.svg"
          }
          if($LASTEXITCODE) { 
            $url = "https://img.shields.io/badge/${{matrix.arch}}-Fail-red.svg?logo=cmake&logoColor=white"
            Invoke-WebRequest $url -OutFile ( New-Item -Path $svg_path -Force )
            echo "CONTINUE=false" >> $GITHUB_ENV
          } else {
            $url = "https://img.shields.io/badge/${{matrix.arch}}-Success-green.svg?logo=cmake&logoColor=white"
            Invoke-WebRequest $url -OutFile ( New-Item -Path $svg_path -Force )
            echo "CONTINUE=true" >> $GITHUB_ENV
          }
          Get-Content -Path $GITHUB_ENV
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
      - name: Build Visual Studio solution
        shell: pwsh
        run: |
          Get-Content -Path $GITHUB_ENV
          if("${{ env.CONTINUE }}" -eq "true") {
            cmd.exe /c Build\\CMake\\Windows\\build.bat "${{ matrix.generator }}" ${{ matrix.arch }} ${{ matrix.toolset }} ${{ matrix.config }}
            if($LASTEXITCODE) {
              $url = "https://img.shields.io/badge/${{matrix.config}}-Fail-red.svg?logo=visualstudio&logoColor=white"
              Invoke-WebRequest $url -OutFile ( New-Item -Path "Status/OSLayer/${{matrix.generator}}-${{matrix.toolset}}-${{matrix.arch}}-${{ matrix.config }}-build.svg" -Force )
              echo "CONTINUE=false" >> $GITHUB_ENV
            } else {
              $url = "https://img.shields.io/badge/${{matrix.config}}-Success-green.svg?logo=visualstudio&logoColor=white"
              Invoke-WebRequest $url -OutFile ( New-Item -Path "Status/OSLayer/${{matrix.generator}}-${{matrix.toolset}}-${{matrix.arch}}-${{ matrix.config }}-build.svg" -Force )
            }
          } else {
              $url = "https://img.shields.io/badge/${{matrix.config}}-Invalid-grey.svg?logo=visualstudio&logoColor=white"
              Invoke-WebRequest $url -OutFile ( New-Item -Path "Status/OSLayer/${{matrix.generator}}-${{matrix.toolset}}-${{matrix.arch}}-${{ matrix.config }}-build.svg" -Force )
          }
      - name: Test Visual Studio solution
        shell: pwsh
        run: |
          if("${{ env.CONTINUE }}" -eq "true") {
            cmd.exe /c Build\\CMake\\Windows\\test.bat "${{ matrix.generator }}" ${{ matrix.arch }} ${{ matrix.toolset }} ${{ matrix.config }}
            if($LASTEXITCODE) { 
              $url = "https://img.shields.io/badge/${{matrix.config}}-Fail-red.svg?logo=cachet&logoColor=white"
              Invoke-WebRequest $url -OutFile ( New-Item -Path "Status/OSLayer/${{matrix.generator}}-${{matrix.toolset}}-${{matrix.arch}}-${{ matrix.config }}-test.svg" -Force )
            } else {
              $url = "https://img.shields.io/badge/${{matrix.config}}-Success-green.svg?logo=cachet&logoColor=white"
              Invoke-WebRequest $url -OutFile ( New-Item -Path "Status/OSLayer/${{matrix.generator}}-${{matrix.toolset}}-${{matrix.arch}}-${{ matrix.config }}-test.svg" -Force )
            }
          } else {
              $url = "https://img.shields.io/badge/${{matrix.config}}-Invalid-grey.svg?logo=visualstudio&logoColor=white"
              Invoke-WebRequest $url -OutFile ( New-Item -Path "Status/OSLayer/${{matrix.generator}}-${{matrix.toolset}}-${{matrix.arch}}-${{ matrix.config }}-test.svg" -Force )
          }
      - name: Cache status
        uses: actions/upload-artifact@v2
        with:
          name: os-layer-status
          path: Status/OSLayer/*.svg

  push-status:
    runs-on: ubuntu-latest
    needs: [generate]
    if: ${{always()}}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: os-layer-status
          path: Status/OSLayer
      - name: Push to status web-site
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: 'Status/OSLayer'
          target-directory: 'Status/OSLayer'
          destination-github-username: 'hud-software'
          destination-repository-name: 'hud-engine-status'
          user-email: ci-oslayer
          target-branch: main
